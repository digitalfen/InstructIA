{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Instructa Framework","text":"<p>A powerful framework based on POD (Prompt-Oriented Development) for automating AI-driven instructions and actions.</p>"},{"location":"#overview","title":"Overview","text":"<p>Instructa is a framework that enables the creation of structured, modular, and reusable prompts for AI systems. It provides a standardized environment for managing context, executing predefined actions, and extending functionality through a keyword-based command system.</p> <p>The framework is particularly useful for IDEs with integrated AI capabilities (like Cursor and WindSurf), where it helps generate and manage context for AI consumption.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Structured Prompts: Well-defined formats for instructions</li> <li>Modularity: Reusable components that can be combined</li> <li>Context Management: Organized storage and retrieval of information</li> <li>Semantic Clarity: Clear meaning and purpose for each instruction</li> <li>Keyword Commands: Simple trigger system for executing predefined actions</li> <li>Extensibility: Framework for adding new commands and actions</li> <li>Internationalization: Support for multiple languages</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Install globally\nnpm install -g instructa\n\n# Initialize a new project\ninstructa init\n\n# Initialize with specific language\ninstructa init --language=pt-BR\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started: Installation and basic setup</li> <li>Core Concepts: Understanding POD and Instructa</li> <li>Features: Detailed explanation of framework features</li> <li>Advanced: Custom instructions and extensions</li> <li>API Reference: CLI commands and configuration</li> <li>Contributing: How to contribute to the project </li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#overview","title":"Overview","text":"<p>Contributions are welcome! This page provides guidelines for contributing to Instructa.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork:    <pre><code>git clone https://github.com/your-username/Instructa.git\n</code></pre></li> <li>Create a new branch:    <pre><code>git checkout -b feature/amazing-feature\n</code></pre></li> </ol>"},{"location":"contributing/#development","title":"Development","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js (v14 or higher)</li> <li>npm (v6 or higher)</li> </ul>"},{"location":"contributing/#setup","title":"Setup","text":"<ol> <li>Install dependencies:    <pre><code>npm install\n</code></pre></li> <li>Build the project:    <pre><code>npm run build\n</code></pre></li> </ol>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Run tests to ensure your changes work as expected:</p> <pre><code>npm test\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md with details of changes if needed</li> <li>Update the documentation if needed</li> <li>Increment the version number in package.json</li> <li>Create a Pull Request</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Use TypeScript for all new code</li> <li>Follow the existing code style</li> <li>Add comments for complex logic</li> <li>Write clear commit messages</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for any new features</li> <li>Add examples for new functionality</li> <li>Keep the documentation up to date</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Instructa, you agree that your contributions will be licensed under the MIT License. </p>"},{"location":"license/","title":"License","text":""},{"location":"license/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2025 DigitalFen</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </p>"},{"location":"advanced/custom-instructions/","title":"Custom Instructions","text":""},{"location":"advanced/custom-instructions/#overview","title":"Overview","text":"<p>Instructa allows you to create custom instructions to extend its functionality. These instructions can be used to define new behaviors and actions.</p>"},{"location":"advanced/custom-instructions/#default-instructions","title":"Default Instructions","text":"<p>Instructa comes with a set of default instructions:</p> <pre><code>{\n  \"context_backup\": [\n    \"Create a folder inside 'instructa/src/backup/' named context_backup_[current date in epoch format]\",\n    \"Copy all files and folders from the 'context' folder to the folder created in the previous action to create a backup of the current context\"\n  ],\n  \"context_update\": [\n    \"Execute the context_backup instruction\",\n    \"Read the content of `context-config.md` and based on the instructions contained therein, analyze each file and its data located in `src/data/` to generate `.md` files within the `context/` folder. Each generated `.md` file must be modularized by subject or functionality, have a clear structure with titles and subtitles, contain only useful, detailed, and well-written information for consumption by LLM, and when including raw data or interpretations of graphs and the like, use ASCII to create the necessary forms, tables, and graphs for explanations\",\n    \"Create a log file in the logs folder, with the date and time of creation in the name. Containing the names of files read to compose that context, the names of generated files, date and time of execution, as well as the prompts used in the process and the differences between the created context files and those from the last backup if it exists. (save the changed line number and example of before and after the change)\"\n  ],\n  \"help\": [\n    \"Explain what each command in this list is for and how to use it\"\n  ]\n}\n</code></pre>"},{"location":"advanced/custom-instructions/#creating-custom-instructions","title":"Creating Custom Instructions","text":"<p>You can create custom instructions by adding them to your <code>instructa.json</code> file:</p> <pre><code>{\n  \"my_custom_instruction\": [\n    \"Step 1: Do something\",\n    \"Step 2: Do something else\",\n    \"Step 3: Return the result\"\n  ]\n}\n</code></pre>"},{"location":"advanced/custom-instructions/#using-custom-instructions","title":"Using Custom Instructions","text":"<p>Custom instructions can be used with the keyword command system:</p> <pre><code>instructa my_custom_instruction\n</code></pre>"},{"location":"advanced/custom-instructions/#example-custom-data-processing","title":"Example: Custom Data Processing","text":"<pre><code>{\n  \"process_data\": [\n    \"Read the data from 'src/data/input.json'\",\n    \"Process the data according to the rules in 'config/processing-rules.json'\",\n    \"Save the processed data to 'src/data/output.json'\",\n    \"Generate a report in 'reports/processing-report.md'\"\n  ]\n}\n</code></pre>"},{"location":"advanced/custom-instructions/#example-custom-code-generation","title":"Example: Custom Code Generation","text":"<pre><code>{\n  \"generate_code\": [\n    \"Read the requirements from 'requirements.md'\",\n    \"Generate code based on the requirements\",\n    \"Save the generated code to 'src/generated/'\",\n    \"Create documentation in 'docs/generated/'\"\n  ]\n}\n</code></pre>"},{"location":"advanced/custom-instructions/#best-practices","title":"Best Practices","text":"<ol> <li>Clear Steps: Break down instructions into clear, actionable steps</li> <li>Descriptive Names: Use descriptive names for your instructions</li> <li>Documentation: Document what each instruction does and how to use it</li> <li>Testing: Test your instructions to ensure they work as expected</li> <li>Modularity: Keep instructions modular and reusable </li> </ol>"},{"location":"advanced/extending/","title":"Extending the Framework","text":""},{"location":"advanced/extending/#overview","title":"Overview","text":"<p>Instructa is designed to be extensible. You can extend its functionality by creating custom prompts, actions, and instructions.</p>"},{"location":"advanced/extending/#extension-points","title":"Extension Points","text":""},{"location":"advanced/extending/#prompts","title":"Prompts","text":"<p>Create custom prompts in the <code>prompts/</code> directory:</p> <pre><code>// prompts/custom-prompt.ts\nexport const prompt = {\n  name: \"custom-prompt\",\n  description: \"A custom prompt\",\n  template: `\n    You are a custom assistant.\n    Please help with: {question}\n  `\n};\n</code></pre>"},{"location":"advanced/extending/#actions","title":"Actions","text":"<p>Create custom actions in the <code>actions/</code> directory:</p> <pre><code>// actions/custom-action.ts\nexport const action = {\n  name: \"custom-action\",\n  description: \"A custom action\",\n  execute: async (context) =&gt; {\n    // Custom action implementation\n    return result;\n  }\n};\n</code></pre>"},{"location":"advanced/extending/#instructions","title":"Instructions","text":"<p>Add custom instructions to your <code>instructa.json</code> file:</p> <pre><code>{\n  \"custom_instruction\": [\n    \"Step 1: Do something\",\n    \"Step 2: Do something else\"\n  ]\n}\n</code></pre>"},{"location":"advanced/extending/#creating-a-plugin","title":"Creating a Plugin","text":"<p>You can create a plugin to package your extensions:</p> <ol> <li>Create a new directory for your plugin</li> <li>Add your custom prompts, actions, and instructions</li> <li>Create a <code>plugin.json</code> file:</li> </ol> <pre><code>{\n  \"name\": \"my-plugin\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A custom plugin for Instructa\",\n  \"prompts\": [\n    \"prompts/custom-prompt.ts\"\n  ],\n  \"actions\": [\n    \"actions/custom-action.ts\"\n  ],\n  \"instructions\": {\n    \"custom_instruction\": [\n      \"Step 1: Do something\",\n      \"Step 2: Do something else\"\n    ]\n  }\n}\n</code></pre> <ol> <li>Install your plugin:</li> </ol> <pre><code>instructa plugin install my-plugin\n</code></pre>"},{"location":"advanced/extending/#example-data-processing-plugin","title":"Example: Data Processing Plugin","text":"<pre><code>{\n  \"name\": \"data-processor\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A plugin for data processing\",\n  \"prompts\": [\n    \"prompts/process-data-prompt.ts\"\n  ],\n  \"actions\": [\n    \"actions/process-data-action.ts\"\n  ],\n  \"instructions\": {\n    \"process_data\": [\n      \"Read the data from 'src/data/input.json'\",\n      \"Process the data according to the rules in 'config/processing-rules.json'\",\n      \"Save the processed data to 'src/data/output.json'\"\n    ]\n  }\n}\n</code></pre>"},{"location":"advanced/extending/#best-practices","title":"Best Practices","text":"<ol> <li>Modularity: Keep your extensions modular and focused</li> <li>Documentation: Document your extensions thoroughly</li> <li>Testing: Test your extensions before publishing</li> <li>Versioning: Use semantic versioning for your plugins</li> <li>Compatibility: Ensure compatibility with the core framework </li> </ol>"},{"location":"api-reference/cli-commands/","title":"CLI Commands","text":""},{"location":"api-reference/cli-commands/#overview","title":"Overview","text":"<p>Instructa provides a command-line interface (CLI) for interacting with the framework. This page documents all available CLI commands.</p>"},{"location":"api-reference/cli-commands/#global-commands","title":"Global Commands","text":""},{"location":"api-reference/cli-commands/#version","title":"Version","text":"<p>Display the current version of Instructa:</p> <pre><code>instructa --version\n</code></pre>"},{"location":"api-reference/cli-commands/#help","title":"Help","text":"<p>Display help information:</p> <pre><code>instructa --help\n</code></pre>"},{"location":"api-reference/cli-commands/#project-commands","title":"Project Commands","text":""},{"location":"api-reference/cli-commands/#init","title":"Init","text":"<p>Initialize a new Instructa project:</p> <pre><code>instructa init [options]\n</code></pre> <p>Options: - <code>--language</code>: Set the project language (default: en-US)   <pre><code>instructa init --language=pt-BR\n</code></pre></p>"},{"location":"api-reference/cli-commands/#context-backup","title":"Context Backup","text":"<p>Create a backup of the current context:</p> <pre><code>instructa context_backup\n</code></pre>"},{"location":"api-reference/cli-commands/#context-update","title":"Context Update","text":"<p>Update the context based on the latest data:</p> <pre><code>instructa context_update\n</code></pre>"},{"location":"api-reference/cli-commands/#help_1","title":"Help","text":"<p>Display help information about available commands:</p> <pre><code>instructa help\n</code></pre>"},{"location":"api-reference/cli-commands/#plugin-commands","title":"Plugin Commands","text":""},{"location":"api-reference/cli-commands/#plugin-install","title":"Plugin Install","text":"<p>Install a plugin:</p> <pre><code>instructa plugin install &lt;plugin-name&gt;\n</code></pre>"},{"location":"api-reference/cli-commands/#plugin-list","title":"Plugin List","text":"<p>List installed plugins:</p> <pre><code>instructa plugin list\n</code></pre>"},{"location":"api-reference/cli-commands/#plugin-remove","title":"Plugin Remove","text":"<p>Remove a plugin:</p> <pre><code>instructa plugin remove &lt;plugin-name&gt;\n</code></pre>"},{"location":"api-reference/cli-commands/#custom-commands","title":"Custom Commands","text":"<p>Custom commands can be added through plugins or by extending the framework. See the Extending the Framework page for more information. </p>"},{"location":"api-reference/configuration/","title":"Configuration","text":""},{"location":"api-reference/configuration/#overview","title":"Overview","text":"<p>Instructa uses configuration files to customize its behavior. This page documents all available configuration options.</p>"},{"location":"api-reference/configuration/#main-configuration-file","title":"Main Configuration File","text":"<p>The main configuration file is <code>instructa.json</code> in the root of your project:</p> <pre><code>{\n  \"language\": \"en-US\",\n  \"prompts\": {\n    \"directory\": \"prompts/\"\n  },\n  \"actions\": {\n    \"directory\": \"actions/\"\n  },\n  \"context\": {\n    \"directory\": \"context/\",\n    \"backup\": {\n      \"directory\": \"context/backup/\"\n    }\n  },\n  \"instructions\": {\n    \"context_backup\": [\n      \"Create a folder inside 'instructa/src/backup/' named context_backup_[current date in epoch format]\",\n      \"Copy all files and folders from the 'context' folder to the folder created in the previous action to create a backup of the current context\"\n    ],\n    \"context_update\": [\n      \"Execute the context_backup instruction\",\n      \"Read the content of `context-config.md` and based on the instructions contained therein, analyze each file and its data located in `src/data/` to generate `.md` files within the `context/` folder. Each generated `.md` file must be modularized by subject or functionality, have a clear structure with titles and subtitles, contain only useful, detailed, and well-written information for consumption by LLM, and when including raw data or interpretations of graphs and the like, use ASCII to create the necessary forms, tables, and graphs for explanations\",\n      \"Create a log file in the logs folder, with the date and time of creation in the name. Containing the names of files read to compose that context, the names of generated files, date and time of execution, as well as the prompts used in the process and the differences between the created context files and those from the last backup if it exists. (save the changed line number and example of before and after the change)\"\n    ],\n    \"help\": [\n      \"Explain what each command in this list is for and how to use it\"\n    ]\n  }\n}\n</code></pre>"},{"location":"api-reference/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"api-reference/configuration/#language","title":"Language","text":"<p>Set the default language for the project:</p> <pre><code>{\n  \"language\": \"en-US\"\n}\n</code></pre> <p>Supported values: - <code>en-US</code>: English (United States) - <code>pt-BR</code>: Portuguese (Brazil)</p>"},{"location":"api-reference/configuration/#prompts","title":"Prompts","text":"<p>Configure the prompts directory:</p> <pre><code>{\n  \"prompts\": {\n    \"directory\": \"prompts/\"\n  }\n}\n</code></pre>"},{"location":"api-reference/configuration/#actions","title":"Actions","text":"<p>Configure the actions directory:</p> <pre><code>{\n  \"actions\": {\n    \"directory\": \"actions/\"\n  }\n}\n</code></pre>"},{"location":"api-reference/configuration/#context","title":"Context","text":"<p>Configure the context directory and backup settings:</p> <pre><code>{\n  \"context\": {\n    \"directory\": \"context/\",\n    \"backup\": {\n      \"directory\": \"context/backup/\"\n    }\n  }\n}\n</code></pre>"},{"location":"api-reference/configuration/#instructions","title":"Instructions","text":"<p>Define custom instructions:</p> <pre><code>{\n  \"instructions\": {\n    \"my_custom_instruction\": [\n      \"Step 1: Do something\",\n      \"Step 2: Do something else\"\n    ]\n  }\n}\n</code></pre>"},{"location":"api-reference/configuration/#environment-variables","title":"Environment Variables","text":"<p>Instructa also supports configuration through environment variables:</p> <ul> <li><code>INSTRUCTA_LANGUAGE</code>: Set the default language</li> <li><code>INSTRUCTA_PROMPTS_DIR</code>: Set the prompts directory</li> <li><code>INSTRUCTA_ACTIONS_DIR</code>: Set the actions directory</li> <li><code>INSTRUCTA_CONTEXT_DIR</code>: Set the context directory</li> <li><code>INSTRUCTA_CONTEXT_BACKUP_DIR</code>: Set the context backup directory </li> </ul>"},{"location":"core-concepts/context-management/","title":"Context Management","text":""},{"location":"core-concepts/context-management/#overview","title":"Overview","text":"<p>Context management is a core feature of Instructa that enables organized storage and retrieval of information for AI consumption. It provides a structured way to maintain and update context across your application.</p>"},{"location":"core-concepts/context-management/#context-structure","title":"Context Structure","text":"<p>Instructa organizes context in a hierarchical structure:</p> <pre><code>context/\n\u251c\u2500\u2500 instructions/     # Default instructions\n\u251c\u2500\u2500 data/            # Processed data files\n\u2514\u2500\u2500 backup/          # Context backups\n</code></pre>"},{"location":"core-concepts/context-management/#default-instructions","title":"Default Instructions","text":"<p>Instructa comes with a set of default instructions for context management:</p> <pre><code>{\n  \"context_backup\": [\n    \"Create a folder inside 'instructa/src/backup/' named context_backup_[current date in epoch format]\",\n    \"Copy all files and folders from the 'context' folder to the folder created in the previous action to create a backup of the current context\"\n  ],\n  \"context_update\": [\n    \"Execute the context_backup instruction\",\n    \"Read the content of `context-config.md` and based on the instructions contained therein, analyze each file and its data located in `src/data/` to generate `.md` files within the `context/` folder. Each generated `.md` file must be modularized by subject or functionality, have a clear structure with titles and subtitles, contain only useful, detailed, and well-written information for consumption by LLM, and when including raw data or interpretations of graphs and the like, use ASCII to create the necessary forms, tables, and graphs for explanations\",\n    \"Create a log file in the logs folder, with the date and time of creation in the name. Containing the names of files read to compose that context, the names of generated files, date and time of execution, as well as the prompts used in the process and the differences between the created context files and those from the last backup if it exists. (save the changed line number and example of before and after the change)\"\n  ]\n}\n</code></pre>"},{"location":"core-concepts/context-management/#using-context-commands","title":"Using Context Commands","text":""},{"location":"core-concepts/context-management/#backup-context","title":"Backup Context","text":"<p>To create a backup of your current context:</p> <pre><code>instructa context_backup\n</code></pre> <p>This will: 1. Create a backup folder with timestamp 2. Copy all context files to the backup folder</p>"},{"location":"core-concepts/context-management/#update-context","title":"Update Context","text":"<p>To update your context:</p> <pre><code>instructa context_update\n</code></pre> <p>This will: 1. Create a backup first 2. Process data files 3. Generate updated context files 4. Create a log of changes</p>"},{"location":"core-concepts/context-management/#custom-context-management","title":"Custom Context Management","text":"<p>You can extend the default context management by:</p> <ol> <li>Creating custom instructions in <code>instructa.json</code></li> <li>Implementing custom actions for context management</li> <li>Defining your own context structure </li> </ol>"},{"location":"core-concepts/keyword-commands/","title":"Keyword Commands","text":""},{"location":"core-concepts/keyword-commands/#overview","title":"Overview","text":"<p>Instructa uses a keyword-based command system to trigger actions. This system allows you to execute predefined actions by using specific keywords during your conversation with AI in IDEs like Cursor or WindSurf.</p>"},{"location":"core-concepts/keyword-commands/#command-format","title":"Command Format","text":"<p>The basic format for using keyword commands is:</p> <pre><code>instructa [keyword]\n</code></pre> <p>Where <code>[keyword]</code> is the identifier for a specific action.</p>"},{"location":"core-concepts/keyword-commands/#default-commands","title":"Default Commands","text":"<p>Instructa comes with a set of default commands:</p>"},{"location":"core-concepts/keyword-commands/#help","title":"Help","text":"<pre><code>instructa help\n</code></pre> <p>This command explains what each command in the list is for and how to use it.</p>"},{"location":"core-concepts/keyword-commands/#context-backup","title":"Context Backup","text":"<pre><code>instructa context_backup\n</code></pre> <p>This command creates a backup of your current context.</p>"},{"location":"core-concepts/keyword-commands/#context-update","title":"Context Update","text":"<pre><code>instructa context_update\n</code></pre> <p>This command updates your context based on the latest data.</p>"},{"location":"core-concepts/keyword-commands/#how-it-works","title":"How It Works","text":"<ol> <li>During your conversation with the AI, you use a keyword command</li> <li>The AI recognizes this as a keyword trigger</li> <li>The AI reads the instructions from the context</li> <li>The AI finds the keyword and its associated action</li> <li>The AI executes the action</li> </ol>"},{"location":"core-concepts/keyword-commands/#example","title":"Example","text":"<p>When you type: <pre><code>instructa help\n</code></pre></p> <p>The AI will: 1. Recognize this as a keyword trigger 2. Read the instructions from <code>context/instructions/default-instructions.md</code> 3. Find the \"help\" keyword and its associated action 4. Execute the action: \"explain what each command in this list is for and how to use it\" 5. Respond with a list of available commands and their descriptions</p>"},{"location":"core-concepts/keyword-commands/#custom-commands","title":"Custom Commands","text":"<p>You can create custom commands by:</p> <ol> <li>Adding new keywords to your instructions in <code>instructa.json</code></li> <li>Implementing the corresponding actions</li> <li>Using the new keywords in your conversations </li> </ol>"},{"location":"core-concepts/pod-development/","title":"POD Development","text":""},{"location":"core-concepts/pod-development/#what-is-pod","title":"What is POD?","text":"<p>POD (Prompt-Oriented Development) is a development paradigm centered on creating systems, frameworks, or agents based on structured, modular, and reusable prompts. It transforms textual instructions into logical context units, providing AI systems (or interpretive compilers) with a solid semantic foundation for code generation, behavior definition, or response formulation.</p>"},{"location":"core-concepts/pod-development/#key-aspects-of-pod","title":"Key Aspects of POD","text":""},{"location":"core-concepts/pod-development/#structured-prompts","title":"Structured Prompts","text":"<p>POD emphasizes well-defined formats for instructions. Each prompt follows a consistent structure:</p> <pre><code>export const prompt = {\n  name: string,        // Unique identifier\n  description: string, // Clear description\n  template: string     // Structured template\n};\n</code></pre>"},{"location":"core-concepts/pod-development/#modularity","title":"Modularity","text":"<p>POD promotes reusable components that can be combined:</p> <ul> <li>Prompts can be composed of smaller, reusable prompts</li> <li>Actions can be chained together</li> <li>Context can be shared between different parts of the system</li> </ul>"},{"location":"core-concepts/pod-development/#context-management","title":"Context Management","text":"<p>POD provides organized storage and retrieval of information:</p> <ul> <li>Structured storage of context</li> <li>Clear separation of concerns</li> <li>Easy access to relevant information</li> </ul>"},{"location":"core-concepts/pod-development/#semantic-clarity","title":"Semantic Clarity","text":"<p>POD ensures clear meaning and purpose for each instruction:</p> <ul> <li>Well-defined templates</li> <li>Consistent naming conventions</li> <li>Clear documentation</li> </ul>"},{"location":"core-concepts/pod-development/#pod-in-instructa","title":"POD in Instructa","text":"<p>Instructa implements POD principles through:</p> <ol> <li>Prompt Templates: Structured formats for creating prompts</li> <li>Action System: Modular actions that can be combined</li> <li>Context Management: Organized storage and retrieval of information</li> <li>Keyword Commands: Simple trigger system for executing actions </li> </ol>"},{"location":"features/actions/","title":"Actions","text":""},{"location":"features/actions/#overview","title":"Overview","text":"<p>Actions are operations that can be executed by Instructa. They allow you to automate tasks and interact with the system.</p>"},{"location":"features/actions/#action-structure","title":"Action Structure","text":"<p>Each action is a markdown file with the following structure:</p> <pre><code># Action Name\n\nDescription of what the action does.\n\n## Context\n\nProvide context about when and how the action should be used.\n\n## Instructions\n\n1. First instruction\n2. Second instruction\n3. Third instruction\n\n## Examples\n\n### Example 1\nInput: Description of input\nOutput: Description of expected output\n\n### Example 2\nInput: Another input\nOutput: Another expected output\n</code></pre>"},{"location":"features/actions/#creating-actions","title":"Creating Actions","text":"<p>Create your actions in the <code>actions/</code> directory:</p> <pre><code># Process Data\n\nAn action to process input data.\n\n## Context\n\nThis action is used to process raw data and convert it into a specific format.\n\n## Instructions\n\n1. Validate input data format\n2. Apply necessary transformations\n3. Generate result in desired format\n4. Validate final result\n\n## Examples\n\n### Example 1\nInput: CSV with sales data\nOutput: JSON with aggregated totals by category\n\n### Example 2\nInput: Log file\nOutput: Error and warning report\n</code></pre>"},{"location":"features/actions/#best-practices","title":"Best Practices","text":"<ol> <li>Clear Context: Provide clear context about the action's purpose</li> <li>Specific Instructions: Give precise instructions for desired behavior</li> <li>Relevant Examples: Include examples that demonstrate expected usage</li> <li>Consistent Format: Follow a consistent format for all actions</li> <li>Regular Updates: Keep actions updated with new requirements and improvements </li> </ol>"},{"location":"features/commands/","title":"Commands","text":""},{"location":"features/commands/#overview","title":"Overview","text":"<p>Commands are the entry points for user interactions in Instructa. They define how users can trigger actions and prompts.</p>"},{"location":"features/commands/#command-structure","title":"Command Structure","text":"<p>Each command is a markdown file with the following structure:</p> <pre><code># Command Name\n\nDescription of what the command does.\n\n## Usage\n\n`command-name [options]`\n\n## Options\n\n- `--option1`: Description of option1\n- `--option2`: Description of option2\n\n## Examples\n\n1. Basic usage:\n   ```\n   command-name\n   ```\n\n2. With options:\n   ```\n   command-name --option1 value1 --option2 value2\n   ```\n</code></pre>"},{"location":"features/commands/#creating-commands","title":"Creating Commands","text":"<p>Create your commands in the <code>commands/</code> directory:</p> <pre><code># My Command\n\nDescription of my command.\n\n## Usage\n\n`my-command [options]`\n\n## Options\n\n- `--input`: Input file path\n- `--output`: Output file path\n\n## Examples\n\n1. Basic usage:\n   ```\n   my-command\n   ```\n\n2. With input and output:\n   ```\n   my-command --input data.txt --output result.txt\n   ```\n</code></pre>"},{"location":"features/commands/#command-categories","title":"Command Categories","text":"<p>Commands can be organized into categories:</p> <pre><code># Category: Data Processing\n\n## Commands\n\n1. `process-data`: Process input data\n2. `analyze-data`: Analyze processed data\n3. `export-data`: Export data to various formats\n</code></pre>"},{"location":"features/commands/#best-practices","title":"Best Practices","text":"<ol> <li>Clear Names: Use descriptive names that indicate the command's purpose</li> <li>Detailed Descriptions: Provide clear descriptions of what the command does</li> <li>Well-Documented Options: Document all available options and their usage</li> <li>Helpful Examples: Include practical examples of command usage</li> <li>Consistent Format: Follow a consistent format for all commands </li> </ol>"},{"location":"features/internationalization/","title":"Internationalization","text":""},{"location":"features/internationalization/#overview","title":"Overview","text":"<p>Instructa supports multiple languages through its internationalization (i18n) system. This allows you to use the framework in your preferred language.</p>"},{"location":"features/internationalization/#supported-languages","title":"Supported Languages","text":"<p>Instructa currently supports the following languages:</p> <ul> <li>English (United States) (en-US)</li> <li>Portuguese (Brazil) (pt-BR)</li> </ul>"},{"location":"features/internationalization/#setting-the-language","title":"Setting the Language","text":""},{"location":"features/internationalization/#during-installation","title":"During Installation","text":"<p>You can set the language during installation:</p> <pre><code># Install with default language (en-US)\nnpm install -g instructa\n\n# Install with specific language\nnpm install -g instructa --language=pt-BR\n</code></pre>"},{"location":"features/internationalization/#during-initialization","title":"During Initialization","text":"<p>You can also set the language when initializing a new project:</p> <pre><code># Initialize with default language (en-US)\ninstructa init\n\n# Initialize with specific language\ninstructa init --language=pt-BR\n</code></pre>"},{"location":"features/internationalization/#language-configuration","title":"Language Configuration","text":"<p>Language configuration files are stored in the <code>config/languages/</code> directory:</p> <pre><code>config/\n\u2514\u2500\u2500 languages/\n    \u251c\u2500\u2500 en-US.json\n    \u2514\u2500\u2500 pt-BR.json\n</code></pre>"},{"location":"features/internationalization/#language-file-structure","title":"Language File Structure","text":"<p>Each language file follows this structure:</p> <pre><code>{\n  \"language\": \"en-US\",\n  \"name\": \"English (United States)\",\n  \"messages\": {\n    \"key1\": \"Message 1\",\n    \"key2\": \"Message 2\"\n  }\n}\n</code></pre>"},{"location":"features/internationalization/#using-translations","title":"Using Translations","text":"<p>Instructa automatically uses the appropriate translations based on the configured language.</p>"},{"location":"features/internationalization/#adding-new-languages","title":"Adding New Languages","text":"<p>To add a new language:</p> <ol> <li>Create a new language file in <code>config/languages/</code></li> <li>Add translations for all messages</li> <li>Update the language configuration to include the new language </li> </ol>"},{"location":"features/prompts/","title":"Prompts","text":""},{"location":"features/prompts/#overview","title":"Overview","text":"<p>Prompts are the core of Instructa's AI interactions. They define how the AI should behave and respond to user inputs.</p>"},{"location":"features/prompts/#prompt-structure","title":"Prompt Structure","text":"<p>Each prompt is a markdown file with the following structure:</p> <pre><code># Prompt Name\n\nDescription of what the prompt does.\n\n## Context\n\nProvide context for the AI about its role and capabilities.\n\n## Instructions\n\n1. First instruction\n2. Second instruction\n3. Third instruction\n\n## Examples\n\n### Example 1\nUser: Input example\nAssistant: Expected response\n\n### Example 2\nUser: Another input\nAssistant: Another response\n</code></pre>"},{"location":"features/prompts/#creating-prompts","title":"Creating Prompts","text":"<p>Create your prompts in the <code>prompts/</code> directory:</p> <p><pre><code># Code Review Assistant\n\nAn AI assistant that helps review code changes.\n\n## Context\n\nYou are a code review assistant with expertise in software development best practices.\n\n## Instructions\n\n1. Analyze code changes for potential issues\n2. Suggest improvements for code quality\n3. Check for security vulnerabilities\n4. Verify adherence to coding standards\n\n## Examples\n\n### Example 1\nUser: Review this code:\n```python\ndef calculate_total(items):\n    return sum(items)\n</code></pre> Assistant: The code looks good but could be improved: 1. Consider adding type hints 2. Add docstring explaining the function 3. Consider handling empty lists</p>"},{"location":"features/prompts/#example-2","title":"Example 2","text":"<p>User: Is this secure? <pre><code>password = input(\"Enter password: \")\n</code></pre> Assistant: This is not secure because: 1. Passwords should never be stored in plain text 2. Input should be validated 3. Consider using a secure password input method ```</p>"},{"location":"features/prompts/#best-practices","title":"Best Practices","text":"<ol> <li>Clear Context: Provide clear context about the AI's role</li> <li>Specific Instructions: Give precise instructions for desired behavior</li> <li>Relevant Examples: Include examples that demonstrate expected interactions</li> <li>Consistent Format: Follow a consistent format for all prompts</li> <li>Regular Updates: Keep prompts updated with new requirements and improvements </li> </ol>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js (v14 or higher)</li> <li>npm (v6 or higher)</li> </ul>"},{"location":"getting-started/installation/#global-installation","title":"Global Installation","text":"<p>Instructa is designed to be installed globally as a command-line tool:</p> <pre><code>npm install -g instructa\n</code></pre>"},{"location":"getting-started/installation/#language-configuration","title":"Language Configuration","text":"<p>Instructa supports multiple languages. You can specify the language during installation:</p> <pre><code># Install with default language (en-US)\nnpm install -g instructa\n\n# Install with specific language\nnpm install -g instructa --language=pt-BR\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>To verify the installation, run:</p> <pre><code>instructa --version\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#permission-issues","title":"Permission Issues","text":"<p>If you encounter permission issues during global installation, you may need to use sudo (on Linux/macOS):</p> <pre><code>sudo npm install -g instructa\n</code></pre> <p>On Windows, run your terminal as Administrator.</p>"},{"location":"getting-started/installation/#nodejs-version","title":"Node.js Version","text":"<p>If you encounter compatibility issues, ensure you have the correct Node.js version:</p> <pre><code>node --version\n</code></pre> <p>The version should be 14 or higher. </p>"},{"location":"getting-started/project-structure/","title":"Project Structure","text":""},{"location":"getting-started/project-structure/#directory-structure","title":"Directory Structure","text":"<p>After initialization, Instructa creates the following directory structure:</p> <pre><code>your-project/\n\u251c\u2500\u2500 prompts/           # Directory for your prompts\n\u2502   \u2514\u2500\u2500 ...           # Prompt files (.md)\n\u251c\u2500\u2500 actions/           # Directory for your actions\n\u2502   \u2514\u2500\u2500 ...           # Action files (.md)\n\u251c\u2500\u2500 config/            # Configuration files\n\u2502   \u251c\u2500\u2500 languages/     # Language configuration files\n\u2502   \u2514\u2500\u2500 ...           # Other configuration files\n\u2514\u2500\u2500 instructa.json     # Main configuration file\n</code></pre>"},{"location":"getting-started/project-structure/#key-components","title":"Key Components","text":""},{"location":"getting-started/project-structure/#prompts-directory","title":"Prompts Directory","text":"<p>The <code>prompts/</code> directory contains all your prompt definitions. Each prompt is a markdown file with the following structure:</p> <p><pre><code># Prompt Name\n\nDescription of what the prompt does.\n\n## Template\n\nThe prompt template with placeholders:\n</code></pre> You are an assistant specialized in {topic}. Please help with: {question} <pre><code>\n</code></pre></p>"},{"location":"getting-started/project-structure/#actions-directory","title":"Actions Directory","text":"<p>The <code>actions/</code> directory contains all your action definitions. Each action is a markdown file with the following structure:</p> <pre><code># Action Name\n\nDescription of what the action does.\n\n## Steps\n\n1. First step\n2. Second step\n3. Return the result\n</code></pre>"},{"location":"getting-started/project-structure/#config-directory","title":"Config Directory","text":"<p>The <code>config/</code> directory contains configuration files:</p> <ul> <li><code>languages/</code>: Language-specific configuration files</li> <li>Other configuration files as needed</li> </ul>"},{"location":"getting-started/project-structure/#instructajson","title":"instructa.json","text":"<p>The main configuration file that defines:</p> <ul> <li>Project settings</li> <li>Default language</li> <li>Custom instructions</li> <li>Other configuration options </li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":""},{"location":"getting-started/quick-start/#initialization","title":"Initialization","text":"<p>After installing Instructa globally, you can initialize a new project:</p> <pre><code># Initialize with default language (en-US)\ninstructa init\n\n# Initialize with specific language\ninstructa init --language=pt-BR\n</code></pre>"},{"location":"getting-started/quick-start/#project-structure","title":"Project Structure","text":"<p>The initialization process creates the following directory structure:</p> <pre><code>your-project/\n\u251c\u2500\u2500 prompts/           # Directory for your prompts\n\u251c\u2500\u2500 actions/           # Directory for your actions\n\u251c\u2500\u2500 config/            # Configuration files\n\u2514\u2500\u2500 instructa.json     # Main configuration file\n</code></pre>"},{"location":"getting-started/quick-start/#creating-your-first-prompt","title":"Creating Your First Prompt","text":"<p>Create a new prompt in the <code>prompts/</code> directory:</p> <pre><code>// prompts/my-prompt.ts\nexport const prompt = {\n  name: \"my-prompt\",\n  description: \"Description of my prompt\",\n  template: `\n    You are an assistant specialized in {topic}.\n    Please help with: {question}\n  `\n};\n</code></pre>"},{"location":"getting-started/quick-start/#creating-your-first-action","title":"Creating Your First Action","text":"<p>Create a new action in the <code>actions/</code> directory:</p> <pre><code>// actions/my-action.ts\nexport const action = {\n  name: \"my-action\",\n  description: \"Description of my action\",\n  execute: async (context) =&gt; {\n    // Action implementation\n    return result;\n  }\n};\n</code></pre>"},{"location":"getting-started/quick-start/#using-keyword-commands","title":"Using Keyword Commands","text":"<p>Instructa uses a keyword-based command system. During your conversation with AI in IDEs like Cursor or WindSurf, you can use keywords to trigger specific actions:</p> <pre><code>instructa [keyword]\n</code></pre> <p>For example: <pre><code>instructa help\n</code></pre></p> <p>This will trigger the help action, which explains all available commands. </p>"}]}
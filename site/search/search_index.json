{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"InstructIA","text":"<p>A Context Management System for AI-driven instructions and actions.</p>"},{"location":"#overview","title":"Overview","text":"<p>InstructIA is designed to streamline the management of AI-driven instructions and actions through a structured approach. It provides a system for organizing and executing predefined commands while maintaining flexibility for customization.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To get started with InstructIA:</p> <ol> <li> <p>Install it globally via npm: <pre><code>npm install -g instructia\n</code></pre></p> </li> <li> <p>Initialize for your IDE: <pre><code>instructia init cursor\n</code></pre></p> </li> </ol> <p>Options: - <code>--language=&lt;lang&gt;</code>: Set project language (default: en-US) - <code>--verbose</code>: Show detailed logs during installation</p>"},{"location":"#available-commands","title":"Available Commands","text":"<ul> <li><code>instructia init &lt;environment&gt;</code>: Initialize Instructia for a specific IDE environment</li> <li>Currently only <code>cursor</code> is supported as environment</li> <li>Support for more IDEs coming soon</li> <li><code>instructia help</code>: Show help information</li> <li><code>instructia version</code>: Show CLI version</li> </ul> <p>For more details, see the Default Instructions page.</p>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li>Learn about Key Features</li> <li>Understand Core Concepts</li> <li>Follow the Installation Guide </li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to InstructIA! Here's how you can help:</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add some amazing feature'</code>)</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<ul> <li>Follow the existing code style</li> <li>Write clear commit messages</li> <li>Include tests for new features</li> <li>Update documentation as needed</li> <li>Be respectful and constructive in discussions</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and considerate of others when contributing to this project.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the MIT License. </p>"},{"location":"core_concepts/","title":"Core Concepts","text":"<p>Understanding the core concepts behind InstructIA is key to leveraging its full potential. These concepts revolve around a novel approach to building automated systems: Prompt-Oriented Development (POD).</p>"},{"location":"core_concepts/#pod-prompt-oriented-development","title":"POD (Prompt-Oriented Development)","text":"<p>Prompt-Oriented Development (POD) is a software development methodology where the primary focus shifts from writing traditional code to designing, structuring, and managing prompts. Instead of defining logic through functions and classes, you define system behavior and actions through well-crafted natural language instructions (prompts).</p> <p>Key principles and benefits of POD include:</p> <ul> <li>Prompt-Defined Workflows: Define entire workflows and core logic using natural language prompts for each action step. This makes development more intuitive and accessible, focusing on human-readable instructions instead of low-level code.</li> <li>Modularity &amp; Reusability: Prompts can be designed as modular components (individual instructions or actions) that can be reused and combined in various sequences (instructions/workflows).</li> <li>Structured Approach: POD emphasizes a structured organization of prompts within a managed context, ensuring clarity, consistency, and maintainability.</li> <li>Rapid Prototyping &amp; Iteration: Modifying system behavior often involves refining prompts rather than complex code changes, enabling faster iteration cycles.</li> </ul> <p>In essence, POD treats prompts as first-class citizens in the development process, managed systematically within a dedicated context.</p>"},{"location":"core_concepts/#instructia-framework-the-pod-engine-cms","title":"InstructIA Framework: The POD Engine &amp; CMS","text":"<p>The InstructIA Framework is the practical implementation\u2014the engine and specialized Context Management System (CMS)\u2014that brings the POD methodology to life.</p> <p>It serves several crucial roles:</p> <ul> <li>Specialized CMS: It acts as a central repository (the context) specifically designed to store, organize, and manage prompts, instructions (keyword triggers linked to action sequences), configurations, and other relevant natural language data.</li> <li>Instruction Interpreter: When a keyword instruction (like <code>instructia context_summarize</code>) is invoked, the framework accesses the context, finds the corresponding instruction data, and interprets the associated sequence of action prompts.</li> <li>Action Executor: Based on the interpreted prompts, the framework orchestrates the execution of the desired tasks (interacting with AI models, manipulating files, calling APIs, etc.), abstracting the low-level implementation details.</li> <li>Enabler of Key Features: The framework provides the foundation for InstructIA's Key Features:<ul> <li>Context Management: Provides the tools and structure to manage the prompt-based context.</li> <li>Keyword Instructions: Implements the trigger mechanism and links keywords to prompt-defined action sequences stored in the context.</li> <li>Extensibility: Allows users to add new instructions and associated action prompts directly into the context using commands like <code>instructia instruction_create</code>.</li> </ul> </li> </ul> <p>Think of the InstructIA Framework as the runtime environment and structured database for a POD-based application, managing and executing the logic defined entirely through prompts.</p>"},{"location":"core_concepts/#how-they-work-together","title":"How They Work Together","text":"<p>POD provides the philosophy and methodology\u2014developing systems by structuring natural language prompts. The InstructIA Framework provides the tooling and runtime\u2014a specialized CMS and interpreter\u2014to effectively build, manage, and run applications developed using the POD approach.</p> <p>Explore the Key Features and Default Instructions to see these concepts in action. </p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#creator","title":"Creator","text":"<p>Created by Vin\u00edcius Maffioli from DigitalFen.</p>"},{"location":"credits/#about-the-framework","title":"About the Framework","text":"<p>This framework is free to use and modify. Feel free to use it in your projects, whether personal or commercial.</p>"},{"location":"credits/#acknowledgments","title":"Acknowledgments","text":"<p>We would like to thank all contributors and users who have helped make InstructIA what it is today.</p>"},{"location":"credits/#license","title":"License","text":"<p>This project is licensed under the MIT License. </p>"},{"location":"custom_instructions/","title":"Creating Custom Instructions","text":"<p>You can extend InstructIA by creating your own keyword instructions using the built-in <code>instruction_create</code> command:</p> <pre><code>instructia instruction_create\n</code></pre> <p>This command will interactively guide you through the process:</p> <ol> <li>Define the Keyword: You'll be asked to provide the new keyword (e.g., <code>my_custom_task</code>). This is the trigger you will use later (<code>instructia my_custom_task</code>).</li> <li>Define the Action(s): You will be prompted to describe, in natural language, the sequence of actions this instruction should perform. You can often break this down into steps.<ul> <li>You might describe a single action directly.</li> <li>You might reference existing reusable actions stored in the <code>instructia/context/actions/</code> directory.</li> <li>You might describe multiple steps sequentially.</li> </ul> </li> <li>Confirmation: The tool will summarize the instruction and ask for confirmation.</li> </ol> <p>Upon confirmation, InstructIA creates the necessary prompt file(s) within your <code>instructia/context/instructions/</code> directory, making your new keyword immediately available for use.</p> <p>This process embodies the POD philosophy: defining functionality through structured natural language prompts rather than writing code. </p>"},{"location":"default_instructions/","title":"Base Instructions","text":"<p>InstructIA comes with a set of base instructions that help you manage your context and rules. These instructions are available by default and can be extended with custom instructions.</p>"},{"location":"default_instructions/#available-instructions","title":"Available Instructions","text":""},{"location":"default_instructions/#context-management","title":"Context Management","text":"<ul> <li><code>update context</code>: Update the context with new files or directories</li> <li><code>reset context</code>: Reset the current context to its initial state</li> <li><code>summarize context</code>: Generate a summary of all context files</li> </ul>"},{"location":"default_instructions/#instruction-management","title":"Instruction Management","text":"<ul> <li><code>create instruction</code>: Create a new custom instruction</li> <li><code>delete instruction</code>: Remove an existing custom instruction</li> <li><code>edit instruction</code>: Modify an existing custom instruction</li> <li><code>list instructions</code>: List all available instructions (default and custom)</li> </ul>"},{"location":"default_instructions/#rule-management","title":"Rule Management","text":"<ul> <li><code>create rule</code>: Create a new development rule</li> <li><code>delete rule</code>: Remove an existing rule</li> <li><code>edit rule</code>: Modify an existing rule</li> <li><code>list rules</code>: List all available rules with their details</li> </ul>"},{"location":"default_instructions/#help","title":"Help","text":"<ul> <li><code>help</code>: Show available commands and their usage</li> </ul>"},{"location":"default_instructions/#usage-examples","title":"Usage Examples","text":""},{"location":"default_instructions/#summarizing-context","title":"Summarizing Context","text":"<p><pre><code>instructia summarize context\n</code></pre> The system will: - Read all <code>.mdc</code> and <code>.md</code> files in the context folder - Generate a clear and objective summary of each file - Focus on main topics, important concepts, and structures - Use language appropriate for LLM consumption</p>"},{"location":"default_instructions/#listing-instructions","title":"Listing Instructions","text":"<p><pre><code>instructia list instructions\n</code></pre> The system will show: - All available instructions - Brief description of each - Whether it's a default or custom instruction</p>"},{"location":"default_instructions/#listing-rules","title":"Listing Rules","text":"<p><pre><code>instructia list rules\n</code></pre> The system will show: - All available rules - Description of each rule - Files the rule applies to - Whether the rule is always active</p>"},{"location":"default_instructions/#creating-a-rule","title":"Creating a Rule","text":"<p><pre><code>instructia create rule\n</code></pre> The system will guide you through creating a new rule with: - A description of what the rule should do - A list of instructions (one per line) - Automatic file creation with proper formatting</p>"},{"location":"default_instructions/#managing-instructions","title":"Managing Instructions","text":"<p><pre><code>instructia create instruction\ninstructia delete instruction\ninstructia edit instruction\n</code></pre> These commands help you manage custom instructions for your project.</p>"},{"location":"default_instructions/#context-operations","title":"Context Operations","text":"<p><pre><code>instructia update context\ninstructia reset context\n</code></pre> Use these commands to manage your project's context.</p>"},{"location":"default_instructions/#best-practices","title":"Best Practices","text":"<ul> <li>Use clear and descriptive names for instructions</li> <li>Keep instructions focused on a single task</li> <li>Document complex instructions</li> <li>Review and update instructions regularly</li> <li>Use rules to enforce development practices</li> </ul>"},{"location":"directory_structure/","title":"Directory Structure","text":"<p>After installing InstructIA globally (<code>npm install instructia</code>), you initialize your context environment by running <code>instructia init cursor</code> in your desired project location. This command creates a specific directory structure in your Cursor IDE configuration directory.</p> <p>The structure is created in your Cursor configuration directory (typically <code>~/.cursor</code> or <code>%USERPROFILE%\\.cursor</code>). Inside this folder, you'll find the following:</p> <pre><code>.cursor/\n\u2514\u2500\u2500 context/\n    \u251c\u2500\u2500 instructions/\n    \u2502   \u251c\u2500\u2500 base-instructions.mdc    # Base instructions combining default and custom\n    \u2502   \u251c\u2500\u2500 default-instructions.mdc # Default system instructions\n    \u2502   \u2514\u2500\u2500 custom-instructions.mdc  # User-defined custom instructions\n    \u2514\u2500\u2500 data/                        # Data files and configurations\n</code></pre>"},{"location":"directory_structure/#key-directories","title":"Key Directories","text":"<ul> <li><code>context/</code>: Main directory for all InstructIA context</li> <li><code>instructions/</code>: Contains all instruction files<ul> <li><code>base-instructions.mdc</code>: Combined instructions (default + custom)</li> <li><code>default-instructions.mdc</code>: System default instructions</li> <li><code>custom-instructions.mdc</code>: User-defined custom instructions</li> </ul> </li> <li><code>data/</code>: Stores data files and configurations</li> </ul>"},{"location":"installation/","title":"Installation &amp; Initialization","text":"<p>Getting started with InstructIA involves two main steps: installing the tool globally and then initializing a context environment in your desired project directory.</p>"},{"location":"installation/#step-1-global-installation","title":"Step 1: Global Installation","text":"<p>First, install the <code>instructia</code> command-line tool globally using npm:</p> <pre><code>npm install -g instructia\n</code></pre> <p>This makes the <code>instructia</code> command available anywhere on your system.</p>"},{"location":"installation/#step-2-initializing-the-context-environment","title":"Step 2: Initializing the Context Environment","text":"<p>Navigate to the directory where you want to manage your AI context (e.g., your project folder) and run the <code>init</code> command:</p> <pre><code># Initialize for Cursor IDE\ninstructia init cursor\n\n# Or initialize with a specific language (e.g., Portuguese)\ninstructia init cursor --language=pt-BR\n</code></pre> <p>What <code>instructia init cursor</code> Does:</p> <p>Running the <code>instructia init cursor</code> command performs the crucial setup within your current directory:</p> <ol> <li>Creates Project Directory: Creates the root directory named <code>instructia/</code>.</li> <li>Creates Subdirectories: Sets up the core folder structure within <code>instructia/</code>, including:<ul> <li><code>context/</code></li> <li><code>context/instructions/</code></li> <li><code>context/data/</code></li> </ul> </li> <li>Sets Up Configuration: Initializes default configuration files.</li> <li>Copies Default Instructions: Populates <code>instructia/context/instructions/</code> with the default set of instructions.</li> <li>Sets Language: Configures the system to use the specified language (or the default, en-US).</li> </ol>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following before proceeding:</p> <ul> <li>Node.js &amp; npm: Required for the global installation (<code>npm install -g</code>). You need Node.js installed.</li> <li>Cursor IDE: Currently, only Cursor IDE is supported. Support for more IDEs is planned for the future.</li> </ul>"},{"location":"installation/#verification","title":"Verification","text":"<p>After global installation, you can verify the tool is available by checking its version:</p> <pre><code>instructia version\n</code></pre>"},{"location":"key_features/","title":"Key Features","text":"<p>InstructIA offers a range of powerful features designed to enhance your development workflow with AI-driven automation based on Prompt-Oriented Development (POD).</p>"},{"location":"key_features/#context-management","title":"Context Management","text":"<p>At its core, InstructIA provides a robust system for managing contextual information crucial for AI interactions. This involves:</p> <ul> <li>Structured Organization: Context data, such as prompts, configurations, and relevant documents, are stored in a well-defined directory structure. This context primarily consists of natural language elements, aligning with the POD focus on prompt-based information.</li> <li>AI Consumption: Information is formatted and organized in a way that is easily consumable by AI models, ensuring consistency and accuracy in responses or actions.</li> <li>Access &amp; Manipulation: Default instructions like <code>instructia context_create-backup</code>, <code>instructia context_load-backup</code>, and <code>instructia context_update</code> allow for easy management and versioning of the context using simple commands.</li> </ul> <p>This structured, prompt-centric approach simplifies the process of feeding relevant information to AI, making interactions more effective.</p>"},{"location":"key_features/#keyword-instructions","title":"Keyword Instructions","text":"<p>Keyword Instructions are a core concept in InstructIA, acting as contextual data points that serve as triggers for predefined action sequences. This directly embodies the POD principle of using natural language triggers for structured, modular execution.</p> <ul> <li>Trigger System: When you run <code>instructia &lt;keyword&gt;</code>, the system identifies the corresponding instruction data within the current context.</li> <li>Defined Action Sequences: Each instruction keyword is linked to a specific list of actions (defined via natural language prompts). This ensures that invoking a keyword executes a consistent, modular workflow.</li> <li>Automation via Prompts: Streamline repetitive development tasks, AI interactions, or project-specific workflows by defining these trigger-action mappings entirely through natural language instructions stored in the context.</li> </ul> <p>This feature turns complex operations into simple, memorable commands, where the logic resides in structured, prompt-based data rather than direct code.</p>"},{"location":"key_features/#extensibility","title":"Extensibility","text":"<p>The InstructIA framework is designed to be highly extensible, allowing you to tailor it to your specific project needs\u2014all through natural language, a cornerstone of POD.</p> <ul> <li>Custom Instructions: Easily create your own keyword instructions (trigger data points) using <code>instructia instruction_create</code>.</li> <li>Custom Actions: Define the tasks or goals (the sequence of actions) for your custom instructions using natural language prompts. The framework interprets these prompts to execute the desired workflow.</li> <li>Modular Design: The framework follows POD principles, encouraging modularity, making it easier to add, modify, or share instructions (triggers) and their associated actions (prompt sequences).</li> </ul> <p>This flexibility ensures that InstructIA can grow and adapt alongside your project requirements, focusing on defining what needs to be done rather than how in code.</p>"},{"location":"key_features/#internationalization","title":"Internationalization","text":"<p>InstructIA supports multiple languages to cater to a global user base.</p> <ul> <li>Multi-Language Support: Currently supports English (en-US) and Portuguese (pt-BR). Support for more languages is planned for future versions.</li> <li>Language Selection: Choose your preferred language during installation (<code>npm install instructia --language=pt-BR</code>) or configure it later.</li> <li>User Experience: Provides interface text, messages, and potentially prompt elements in the selected language, improving accessibility and usability for non-English speakers.</li> </ul>"},{"location":"key_features/#getting-started","title":"Getting Started","text":"<p>To begin using these features, follow our Installation Guide and explore the Default Instructions. </p>"},{"location":"license/","title":"License","text":""},{"location":"license/#mit-license","title":"MIT License","text":"<p>Copyright \u00a9 2024 Vin\u00edcius Maffioli</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </p>"},{"location":"rules/","title":"Rules System","text":"<p>Rules are a powerful way to define and enforce development practices and guidelines in your project. Each rule is stored in its own <code>.mdc</code> file in the <code>.cursor/rules/</code> directory.</p>"},{"location":"rules/#default-rules","title":"Default Rules","text":"<p>The system comes with a default set of rules in <code>default.mdc</code> that cover common development best practices. These rules are always applied to your project.</p>"},{"location":"rules/#managing-rules","title":"Managing Rules","text":"<p>You can create, edit, and delete rules using the following commands:</p>"},{"location":"rules/#create-a-rule","title":"Create a Rule","text":"<pre><code>instructia create rule\n</code></pre> <p>This command will: 1. Ask for a short description of what the rule should do 2. Ask for the instructions (one per line, starting with '-') 3. Create a new <code>.mdc</code> file with:    - The description as title    - Each instruction as a bullet point    - Default settings (applies to all files)</p> <p>Example: <pre><code>Description: Documentation Rules\nInstructions:\n- keep documentation up to date\n- use markdown\n- include examples\n- document public APIs\n</code></pre></p>"},{"location":"rules/#edit-a-rule","title":"Edit a Rule","text":"<pre><code>instructia edit rule\n</code></pre> <p>This command will: 1. List all available rules 2. Let you choose which rule to edit 3. Show the current content 4. Let you provide new content 5. Update the rule file</p>"},{"location":"rules/#delete-a-rule","title":"Delete a Rule","text":"<pre><code>instructia delete rule\n</code></pre> <p>This command will: 1. List all available rules 2. Let you choose which rule to delete 3. Remove the rule file</p>"},{"location":"rules/#rule-structure","title":"Rule Structure","text":"<p>Each rule file follows this structure:</p> <pre><code>---\ndescription: Description of what the rule does\nglobs: [\"**/*\"]  # Files the rule applies to\nalwaysApply: true  # Whether the rule is always active\n---\n\n# Rule Title\n\n- Instruction 1\n- Instruction 2\n- Instruction 3\n</code></pre>"},{"location":"rules/#best-practices","title":"Best Practices","text":"<ul> <li>Keep rules focused and specific</li> <li>Use clear, actionable instructions</li> <li>Group related instructions together</li> <li>Keep rules up to date</li> <li>Review rules periodically </li> </ul>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide provides an overview of how to use InstructIA effectively.</p> <p>Important Note on IDE Support</p> <p>InstructIA is designed to support multiple development environments. Currently, Cursor IDE is the first supported environment, but we are actively working to expand support to other popular IDEs like VS Code, JetBrains, and other development environments. Stay tuned for updates on when new environments will be supported.</p>"},{"location":"usage/#getting-started","title":"Getting Started","text":"<p>InstructIA follows a simple workflow:</p> <ol> <li>Installation: Install the tool globally using npm</li> <li>Initialization: Set up your context environment in your project</li> <li>Usage: Use predefined instructions or create your own</li> </ol> <p>For detailed instructions on each step, refer to the specific sections in the navigation menu.</p>"},{"location":"usage/#command-structure","title":"Command Structure","text":"<p>All InstructIA commands follow this pattern:</p> <pre><code>instructia &lt;command&gt; [options]\n</code></pre> <p>Where <code>&lt;command&gt;</code> is one of the available commands:</p> <pre><code># Initialize environment (currently supports cursor)\ninstructia init cursor [--language=&lt;lang&gt;]\n\n# Show help\ninstructia help\n\n# Show version\ninstructia version\n</code></pre>"},{"location":"usage/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Installation: Step-by-step guide for installing and initializing InstructIA</li> <li>Default Instructions: List and explanation of built-in instructions</li> <li>Creating Custom Instructions: How to extend InstructIA with your own instructions</li> </ul> <p>For more information on specific topics, please refer to the corresponding sections in the navigation menu. </p>"}]}